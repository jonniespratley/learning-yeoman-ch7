{"filter":false,"title":"jps-n_test.js","tooltip":"/jps-n/test/jps-n_test.js","undoManager":{"mark":19,"position":19,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":["'use strict';","","var jpsN = require('../lib/jps-n.js');","","/*","  ======== A Handy Little Nodeunit Reference ========","  https://github.com/caolan/nodeunit","","  Test methods:","    test.expect(numAssertions)","    test.done()","  Test assertions:","    test.ok(value, [message])","    test.equal(actual, expected, [message])","    test.notEqual(actual, expected, [message])","    test.deepEqual(actual, expected, [message])","    test.notDeepEqual(actual, expected, [message])","    test.strictEqual(actual, expected, [message])","    test.notStrictEqual(actual, expected, [message])","    test.throws(block, [error], [message])","    test.doesNotThrow(block, [error], [message])","    test.ifError(value)","*/","","exports.jpsN = {","  setUp: function(done) {","    // setup here","    done();","  },","  'no args': function(test) {","    test.expect(1);","    // tests here","    test.equal(jpsN.awesome(), 'awesome', 'should be awesome.');","    test.done();","  }","};"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":14}},"text":" 'use strict';"},{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":37,"column":0}},"lines":["   var RestServer = require('../lib/jps-node-plugin.js').RestServer;","   var request = require('supertest'),","      mockServer,","      expected = {","       message : 'RESTful Node API Server'","      };","   mockServer = new RestServer();","   mockServer.listen(9090);","     exports.RestServer = {","     setUp : function(done) {","done(); },","     'GET /api/posts' : function(test) {","       expected.message = 'Query items in posts';","       request(mockServer)","         .get('/api/posts')","         .expect('Content-Type', /json/)","         .expect(200)","         .end(function(err, res){","         if(err){","throw err; }","         test.deepEqual(res.body, expected, 'should get all items');","         test.done();","       });","     },","     'POST /api/posts' : function(test) {","       expected.message = 'Create item in posts';","       request(mockServer)","         .post('/api/posts')","         .expect('Content-Type', /json/)","         .expect(200)","         .end(function(err, res){","         if(err){","throw err; }","         test.deepEqual(res.body, expected, 'should create item');","￼      test.done();","    });"]},{"action":"insertText","range":{"start":{"row":37,"column":0},"end":{"row":37,"column":4}},"text":"} };"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":37,"column":0},"end":{"row":37,"column":4}},"text":"} };"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":37,"column":0}},"nl":"\n","lines":[" 'use strict';","   var RestServer = require('../lib/jps-node-plugin.js').RestServer;","   var request = require('supertest'),","      mockServer,","      expected = {","       message : 'RESTful Node API Server'","      };","   mockServer = new RestServer();","   mockServer.listen(9090);","     exports.RestServer = {","     setUp : function(done) {","done(); },","     'GET /api/posts' : function(test) {","       expected.message = 'Query items in posts';","       request(mockServer)","         .get('/api/posts')","         .expect('Content-Type', /json/)","         .expect(200)","         .end(function(err, res){","         if(err){","throw err; }","         test.deepEqual(res.body, expected, 'should get all items');","         test.done();","       });","     },","     'POST /api/posts' : function(test) {","       expected.message = 'Create item in posts';","       request(mockServer)","         .post('/api/posts')","         .expect('Content-Type', /json/)","         .expect(200)","         .end(function(err, res){","         if(err){","throw err; }","         test.deepEqual(res.body, expected, 'should create item');","￼      test.done();","    });"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":14}},"text":" 'use strict';"},{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":32,"column":0}},"lines":[" var RestServer = require('../lib/jps-node-plugin.js').RestServer;"," var request = require('supertest'),","   mockServer,","   expected = {","     message: 'RESTful Node API Server'","   };"," mockServer = new RestServer();"," mockServer.listen(9090);"," exports.RestServer = {","   setUp: function(done) {","     done();","   },","   'GET /api/posts': function(test) {","     expected.message = 'Query items in posts';","     request(mockServer).get('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","       if (err) {","         throw err;","       }","       test.deepEqual(res.body, expected, 'should get all items');","       test.done();","     });","   },","   'POST /api/posts': function(test) {","     expected.message = 'Create item in posts';","     request(mockServer).post('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","       if (err) {","         throw err;","       }","       test.deepEqual(res.body, expected, 'should create item');￼test.done();","     });","   }"]},{"action":"insertText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":3}},"text":" };"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":43},"end":{"row":1,"column":49}},"text":"plugin"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":42},"end":{"row":1,"column":43}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":41},"end":{"row":1,"column":42}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":40},"end":{"row":1,"column":41}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":39},"end":{"row":1,"column":40}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":64},"end":{"row":30,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":7}},"text":"       "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":4},"end":{"row":33,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":33,"column":0},"end":{"row":33,"column":3}},"text":"   "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":33,"column":3},"end":{"row":33,"column":4}},"text":"}"},{"action":"removeText","range":{"start":{"row":33,"column":0},"end":{"row":33,"column":3}},"text":"   "},{"action":"insertText","range":{"start":{"row":33,"column":0},"end":{"row":33,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":33,"column":1},"end":{"row":33,"column":2}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":25},"end":{"row":9,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":1},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":1}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":36,"column":0},"end":{"row":36,"column":3}},"text":" };"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":36,"column":0}},"nl":"\n","lines":[" 'use strict';"," var RestServer = require('../lib/jps-n.js').RestServer;"," var request = require('supertest'),","   mockServer,","   expected = {","     message: 'RESTful Node API Server'","   };"," mockServer = new RestServer();"," mockServer.listen(9090);"," "," "," exports.RestServer = {","   setUp: function(done) {","     done();","   },","   'GET /api/posts': function(test) {","     expected.message = 'Query items in posts';","     request(mockServer).get('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","       if (err) {","         throw err;","       }","       test.deepEqual(res.body, expected, 'should get all items');","       test.done();","     });","   },","   'POST /api/posts': function(test) {","     expected.message = 'Create item in posts';","     request(mockServer).post('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","       if (err) {","         throw err;","       }","       test.deepEqual(res.body, expected, 'should create item');","       ￼test.done();","     });","   }"," "]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":65}},"text":"var RestServer = require('../lib/jps-node-plugin.js').RestServer;"},{"action":"insertText","range":{"start":{"row":0,"column":65},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":48,"column":0}},"lines":["","var request = require('supertest'), mockServer, ","expected = {","\tmessage : 'RESTful Node API Server'","};","","//Start mock server","mockServer = new RestServer();","mockServer.listen(9090);","","//Listen to mock server","","","exports.RestServer = {","\tsetUp : function(done) {","\t\tdone();","\t},","\t'GET /api/posts' : function(test) {","\t\texpected.message = 'Query items in posts';","","\t\trequest(mockServer)","\t\t\t.get('/api/posts')","\t\t\t.expect('Content-Type', /json/)","\t\t\t.expect(200)","\t\t\t.end(function(err, res){","\t\t\t\tif(err){","\t\t\t\t\tthrow err;","\t\t\t\t}","\t\t\t\ttest.deepEqual(res.body, expected, 'should get all items');","\t\t\t\ttest.done();","\t\t});","","\t},","\t'POST /api/posts' : function(test) {","\t\texpected.message = 'Create item in posts';","\t\trequest(mockServer)","\t\t\t.post('/api/posts')","\t\t\t.expect('Content-Type', /json/)","\t\t\t.expect(200)","\t\t\t.end(function(err, res){","\t\t\t\tif(err){","\t\t\t\t\tthrow err;","\t\t\t\t}","\t\t\t\ttest.deepEqual(res.body, expected, 'should create item');","\t\t\t\ttest.done();","\t\t});","\t}"]},{"action":"insertText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":2}},"text":"};"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":42},"end":{"row":0,"column":48}},"text":"plugin"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":41},"end":{"row":0,"column":42}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":40},"end":{"row":0,"column":41}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":39},"end":{"row":0,"column":40}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":38},"end":{"row":0,"column":39}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":2}},"text":"};"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":48,"column":0}},"nl":"\n","lines":["var RestServer = require('../lib/jps-n.js').RestServer;","","var request = require('supertest'), mockServer, ","expected = {","\tmessage : 'RESTful Node API Server'","};","","//Start mock server","mockServer = new RestServer();","mockServer.listen(9090);","","//Listen to mock server","","","exports.RestServer = {","\tsetUp : function(done) {","\t\tdone();","\t},","\t'GET /api/posts' : function(test) {","\t\texpected.message = 'Query items in posts';","","\t\trequest(mockServer)","\t\t\t.get('/api/posts')","\t\t\t.expect('Content-Type', /json/)","\t\t\t.expect(200)","\t\t\t.end(function(err, res){","\t\t\t\tif(err){","\t\t\t\t\tthrow err;","\t\t\t\t}","\t\t\t\ttest.deepEqual(res.body, expected, 'should get all items');","\t\t\t\ttest.done();","\t\t});","","\t},","\t'POST /api/posts' : function(test) {","\t\texpected.message = 'Create item in posts';","\t\trequest(mockServer)","\t\t\t.post('/api/posts')","\t\t\t.expect('Content-Type', /json/)","\t\t\t.expect(200)","\t\t\t.end(function(err, res){","\t\t\t\tif(err){","\t\t\t\t\tthrow err;","\t\t\t\t}","\t\t\t\ttest.deepEqual(res.body, expected, 'should create item');","\t\t\t\ttest.done();","\t\t});","\t}"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":55}},"text":"var RestServer = require('../lib/jps-n.js').RestServer;"},{"action":"insertText","range":{"start":{"row":0,"column":55},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":41,"column":0}},"lines":["","var request = require('supertest'),","  mockServer,","  expected = {","    message: 'RESTful Node API Server'","  };","","//Start mock server","mockServer = new RestServer();","mockServer.listen(9090);","","//Listen to mock server","","","exports.RestServer = {","  setUp: function(done) {","    done();","  },","  'GET /api/posts': function(test) {","    expected.message = 'Query items in posts';","","    request(mockServer).get('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","      if (err) {","        throw err;","      }","      test.deepEqual(res.body, expected, 'should get all items');","      test.done();","    });","","  },","  'POST /api/posts': function(test) {","    expected.message = 'Create item in posts';","    request(mockServer).post('/api/posts').expect('Content-Type', /json/).expect(200).end(function(err, res) {","      if (err) {","        throw err;","      }","      test.deepEqual(res.body, expected, 'should create item');","      test.done();","    });","  }"]},{"action":"insertText","range":{"start":{"row":41,"column":0},"end":{"row":41,"column":2}},"text":"};"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":41,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1406931349563,"hash":"11d9e2287c1404197332a90959a09f17b7a40c92"}